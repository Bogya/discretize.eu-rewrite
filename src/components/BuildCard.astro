---
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";
import Profession from "./gw2-ui/Profession.astro";
import images, { getOptimizedImage } from "./images";

export interface BuildCardProps {
  title: string;
  role: string;
  date: string;
  profession: string;
  specialization: string;
  cmGuide: boolean;
  uptodate: boolean;
  rating: number;
  slug: string;
  archive: boolean;
}

const UPDATED_LAST_X_DAYS = 30;
const {
  title,
  specialization,
  profession,
  slug,
  date,
  cmGuide,
  role,
  rating,
  uptodate = { guide: true, gear: true },
  archive = false,
} = Astro.props;

const pcM = `var(--gw2-color-${profession.toLowerCase()}-main)`;
const pcL = `var(--gw2-color-${profession.toLowerCase()}-light)`;

const image = await getOptimizedImage(specialization.toLowerCase());
---

<a
  href={`/builds/${slug}`}
  class={`buildLink ${rating.toLowerCase().replace(" ", "")} ${
    archive ? "archive" : ""
  }`}
>
  <article class="row outer round">
    <img
      src={image.src}
      width={100}
      height={100}
      alt={specialization}
      class="image"
    />
    <div class="title">
      <Profession
        name={specialization}
        disableLink
        className="spec"
        text={title}
      />
      <!-- {
        // if this build was updated in the last 7 days, show a new tag
        new Date(date).getTime() >
        new Date().getTime() - UPDATED_LAST_X_DAYS * 24 * 60 * 60 * 1000 ? (
          <span class="badge">Updated</span>
        ) : undefined
      } -->
    </div>

    <div class="infoButtons">
      <div class="lastUpdated">
        <Icon
          name="mdi:clock-outline"
          height="1.8rem"
          class={`${
            uptodate.guide && uptodate.gear
              ? "green"
              : uptodate.guide || uptodate.gear
              ? "yellow"
              : "red"
          } update-icon`}
        />
        <div class="tooltip top">
          Gear: {uptodate.gear ? "up-to-date" : "not updated"}<br />
          Guide: {uptodate.guide ? "up-to-date" : "not updated"}
        </div>
      </div>

      {
        cmGuide && (
          <div class="cmGuide">
            <Icon name="mdi:book-open" height="1.8rem" />
            <div class="tooltip top">CM-Guide available</div>
          </div>
        )
      }
    </div>

    <div class="tags l">
      {
        [rating, role].map((tag) => {
          return (
            <div class="chip border tertiary-border on-surface small tag">
              <span>{tag}</span>
            </div>
          );
        })
      }
    </div>

    <!-- <div class="l">
      {cmGuide ? <button class="btn btn-primary">CM Guide</button> : undefined}
    </div>

    <button class="btn btn-primary l">Build</button> -->
  </article>
</a>

<style define:vars={{ pcM, pcL }}>
  .outer {
    height: 110px;
    padding: 0 2rem;
    width: 100%;
    border: 1px solid var(--pcM);
    display: grid;
    grid-template-columns: 1fr 2fr 80px 2fr;
  }
  .outer:hover {
    border: 1px solid var(--pcL);
  }
  .title {
    font-size: 1.4rem;
  }
  .buildLink {
    display: block;
    margin-bottom: 1rem;
  }
  .lastUpdated {
    font-size: 0.8rem;
  }
  .cmGuide {
    color: var(--primary);
  }
  .infoButtons {
    display: flex;
    gap: 0.5rem;
    align-self: center;
  }
  .tags {
    justify-self: flex-end;
  }
  .tag {
    cursor: default;
  }
  .chip {
    font-size: 0.6rem;
  }

  .update-icon {
    color: black;
  }

  .archive {
    display: none;
  }
  @media (max-width: 1000px) {
    .outer {
      grid-template-columns: 1fr 2fr 80px;
    }
  }
  @media (max-width: 500px) {
    .outer {
      padding: 0 0.5rem;
    }
    .title {
      font-size: 1.1rem;
    }
  }

  @media (max-width: 900px) {
    .lastUpdated {
      position: relative;
      left: 0;
    }
    .title {
      margin-left: 0 !important;
    }
    .tags {
      position: relative;
      left: 0;
    }
  }
</style>
