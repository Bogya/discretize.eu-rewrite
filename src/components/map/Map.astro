---
import { Image, Picture } from "@astrojs/image/components";
import { getMapData } from "./mapData";
import Tooltip from "../Tooltip.astro";
import Card from "../Card.astro";
import TableOfContents, { Heading } from "../TableOfContents.astro";
import Tooltip2 from "../Tooltip2.astro";

interface Props {
    type: string;
    headings: Heading[];
}

const HOVER_COLOR = "fill-blue-200/30";

const { type, headings } = Astro.props;

const map = getMapData(type);

const { src, width, height, PathSVG, encounters = [] } = map || {};

const encounter_list = encounters.map((elem, index) => ({
    ...elem,
    ...headings[index],
    onclick: `window.scrollTo({ top: document.querySelector('#${headings[index].slug}').offsetTop - 70, behavior: 'smooth' });`,
}));
---

{
    src ? (
        <div
            class={`relative`}
            style={{ maxWidth: width + "px", maxHeight: height + "px" }}
        >
            <Image src={src} alt="Map" width={width} height={height} />

            <PathSVG width={width} height={height} />

            <svg
                id="areas"
                class="absolute z-20 top-0 left-0 w-full"
                fill="transparent"
                viewBox={`0 0 ${width} ${height}`}
            >
                {encounter_list.map(({ area, slug, onclick }) => (
                    <a
                        id={`area-${slug}`}
                        onclick={onclick}
                        class={`hover:${HOVER_COLOR} cursor-pointer`}
                    >
                        <Fragment set:html={area} />
                    </a>
                ))}
            </svg>

            {encounter_list.map(
                (
                    { isMajor, text, slug, xPercent, yPercent, onclick },
                    index
                ) => (
                    <div
                        class="absolute z-20"
                        style={{
                            top: `${xPercent}%`,
                            left: `${yPercent}%`,
                        }}
                    >
                        <Tooltip2>
                            <button
                                slot="target"
                                class={`btn btn-circle ${
                                    isMajor
                                        ? "btn-primary"
                                        : "btn-secondary w-8 h-8 !min-h-fit"
                                }`}
                                onclick={onclick}
                                onmouseenter={`document.querySelector('#area-${slug}')?.classList.add("${HOVER_COLOR}")`}
                                onmouseleave={`document.querySelector('#area-${slug}')?.classList.remove("${HOVER_COLOR}")`}
                            >
                                {index + 1}
                            </button>
                            <div slot="tooltip" aria-label="Tooltip">
                                <h4 class="!mb-2">{text}</h4>
                                <span class="!text-xs">
                                    Click to go to{" "}
                                    {isMajor ? "encounter" : "path"}
                                </span>
                            </div>
                        </Tooltip2>
                    </div>
                )
            )}
        </div>
    ) : (
        <Card title="Table of contents" className="!mt-0">
            <TableOfContents headings={headings} offset={-1} />
        </Card>
    )
}
