---
import { Icon } from "astro-icon";

interface Props {
  caption: string;
  url: string;
  sourceId: string;
}

const SOURCE_URL = "https://pub-80c25841bf1e4cbda246ab1b42798500.r2.dev/";

const { caption, url, sourceId } = Astro.props;

const sources_list = ["av1", "vp9", "x264"].map((codec) => {
  return {
    src: `${SOURCE_URL}${sourceId}/${sourceId}.${codec}.mp4`,
    codec: codec.startsWith("av1") ? "av01.0.05M.08" : codec,
  };
});
---

<script>
  class VideoFigure extends HTMLElement {
    connectedCallback() {
      this.video.addEventListener("mouseover", () => this.play());
      this.video.addEventListener("mouseout", () => this.pause());

      this.playButton.addEventListener("click", (e) => this.play());
      this.video.addEventListener("click", (e) => {
        if (this.video.paused) {
          this.play();
        } else {
          this.pause();
        }
      });

      // Target Edge on Windows with UserAgent and Platform strings
      if (window.navigator.userAgent.toLowerCase().includes("edg")) {
        // Select the playable source file and set video src
        this.video.src = this.video
          .querySelector("source[type='video/mp4; codecs=vp9']")
          .getAttribute("src");
      }
    }

    get video() {
      return this.querySelector("video");
    }

    get playButton() {
      return this.querySelector("#playButton");
    }

    async play() {
      try {
        await this.video.play();
        // for some reason we need to play it twice for mobile devices
        await this.video.play();

        if (this.playButton instanceof HTMLElement) {
          this.playButton.style.display = "none";
        }
      } catch (e) {}
    }

    pause() {
      this.video.pause();
      if (this.playButton instanceof HTMLElement) {
        this.playButton.style.display = "block";
      }
    }
  }

  customElements.define("video-figure", VideoFigure);
</script>

<video-figure class="relative pb-[56.25%] pt-[25px]">
  <div
    id="playButton"
    class="absolute top-2/4 left-2/4 -translate-x-1/2 -translate-y-1/2 cursor-pointer z-10 text-blue-500"
  >
    <Icon name="mdi:play-circle-outline" size="4rem" />
  </div>

  <video loop preload="auto" class="w-full h-auto rounded">
    {
      sources_list.map(({ src, codec }) => (
        <source src={src} type={`video/mp4; codecs=${codec}`} />
      ))
    }
  </video>
  <figcaption class="text-sm m-0 text-center pt-1 px-2 mb-4">
    {caption}
  </figcaption>
</video-figure>
