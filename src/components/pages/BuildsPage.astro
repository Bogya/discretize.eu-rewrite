---
import Profession from "src/components/gw2-ui/Profession.astro";
import Layout from "src/layouts/Layout.astro";
import "@gw2-ui/default_style.css";
import "@discretize/typeface-menomonia";
import BuildCard, { BuildCardProps } from "src/components/BuildCard.astro";
import TextDivider from "src/components/TextDivider.astro";
import Label from "src/components/Label.astro";
import type { ProfessionTypes } from "@gw2-ui/data/professions";
import { Icon } from "astro-icon";

interface Props {
  professions: ProfessionTypes[];
}

const PROFESSIONS = Astro.props.professions.map((profession) => ({
  profession,
  builds: [],
}));

const buildsRaw = await Astro.glob(
  `../../../discretize-guides/builds/**/*/index.mdx`
);
const builds: BuildCardProps[] = buildsRaw.map((build) => ({
  title: build.frontmatter.title,
  role: build.frontmatter.role,
  date: build.frontmatter.date,
  profession: build.frontmatter.profession,
  specialization: build.frontmatter.specialization,
  cmGuide: build.frontmatter.cmGuide,
  uptodate: build.frontmatter.uptodate,
  rating: build.frontmatter.rating,
  archive: build.frontmatter.archive,
  slug: build.file
    .split("discretize-guides/builds/")[1]
    .replace("/index.mdx", ""),
}));
builds.forEach((build) => {
  const profession = PROFESSIONS.find(
    ({ profession }) => profession === build.profession
  );
  if (profession) {
    profession.builds.push(build);
  }
});
---

<script>
  const dT_LFG_Builds =
    document.querySelectorAll<HTMLAnchorElement>(".discretizelfg");
  const allBuilds = document.querySelectorAll<HTMLAnchorElement>(".buildLink");
  const archivedBuilds =
    document.querySelectorAll<HTMLAnchorElement>(".archive");
  const buildsSections = document.querySelectorAll<HTMLDivElement>(".builds");
  const allButtons =
    document.querySelectorAll<HTMLButtonElement>(".buildsNav button");

  function highlightButton(id: string) {
    const button = document.querySelector(`[id='${id}']`);
    button.classList.remove("surface");
    button.classList.add("primary");

    // unhighlight the other buttons
    allButtons.forEach((button) => {
      if (button.id !== id) {
        button.classList.remove("primary");
        button.classList.add("surface");
      }
    });
  }

  function removeEmptySections() {
    buildsSections.forEach((build) => {
      build.style.display = "block";
    });
    // check if categories .builds are empty and hide if they are
    buildsSections.forEach((build) => {
      // count children that are visible
      const visibleChildren = Array.from(build.children).filter((child) => {
        return child.style.display !== "none";
      });
      if (visibleChildren.length === 1) {
        build.style.display = "none";
      }
    });
  }

  function hideAllBuilds() {
    allBuilds.forEach((builds) => {
      builds.style.display = "none";
    });
  }

  function showDiscretizeLFGBuilds() {
    hideAllBuilds();
    dT_LFG_Builds.forEach((dT_LFG_Build) => {
      // show the build by accessign styles
      dT_LFG_Build.style.display = "block";
    });

    removeEmptySections();
    highlightButton("button-dtlfg");
  }

  function showCurrentBuilds() {
    allBuilds.forEach((builds) => {
      builds.style.display = "block";
    });
    archivedBuilds.forEach((archivedBuild) => {
      // hide the build by accessign styles
      archivedBuild.style.display = "none";
    });
    removeEmptySections();
    highlightButton("button-current");
  }

  function showArchivedBuilds() {
    hideAllBuilds();
    archivedBuilds.forEach((archivedBuild) => {
      // show the build by accessign styles
      archivedBuild.style.display = "block";
    });
    removeEmptySections();
    highlightButton("button-archived");
  }

  function attachListeners() {
    const dT_LFG_Button = document.querySelector("[id='button-dtlfg']");
    dT_LFG_Button.addEventListener("click", showDiscretizeLFGBuilds);

    const currentBuildsButton = document.querySelector("[id='button-current']");
    currentBuildsButton.addEventListener("click", showCurrentBuilds);

    const archivedBuildsButton = document.querySelector(
      "[id='button-archived']"
    );
    archivedBuildsButton.addEventListener("click", showArchivedBuilds);
  }
  // attach listeners on page load
  attachListeners();
</script>

<Layout title="Builds" disableBackground>
  <nav class="no-space buildsNav">
    <button
      class="border left-round max large primary"
      id="button-current"
      aria-label="Current Builds"
    >
      <span>Current</span>
      <div class="tooltip up">Viable builds for the current patch</div>
    </button>
    <button
      class="border no-round max large surface"
      id="button-dtlfg"
      aria-label="Discretize LFG Builds"
    >
      <span>[dT] LFG <Icon name="mdi:information" height="1rem" /></span>
      <div class="tooltip up">Builds used by the Discretize Guild</div>
    </button>
    <button
      class="border right-round max large surface"
      id="button-archived"
      aria-label="Archived Builds"
    >
      <span>Archive</span>
      <div class="tooltip up">Not updated, potentially outdated builds</div>
    </button>
  </nav>

  {
    PROFESSIONS.map(({ profession, builds }) => (
      <>
        <div class="builds">
          <TextDivider>
            <Label>
              <Profession name={profession} disableLink />
            </Label>
          </TextDivider>
          {builds.map((build) => (
            <BuildCard {...build} />
          ))}
        </div>
      </>
    ))
  }

  <style>
    .builds {
      margin-top: 2rem;
    }
  </style>
</Layout>
